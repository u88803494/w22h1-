{"version":3,"sources":["nav/Nav.js","home/index.js","post_list/index.js","posts/index.js","App.js","serviceWorker.js","index.js"],"names":["Item","to","text","exact","path","children","match","className","Nav","page","onClick","style","homepage","fontSize","paddingTop","Home","homppage","Component","Posts","props","post","data","state","axios","get","then","res","setState","filter","title","author","this","history","map","key","id","push","withRouter","Post","postId","params","body","About","App","component","PostList","React","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a10f66e.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\nimport { Link, Route } from \"react-router-dom\";\n\nconst Item = ({ to, text, exact }) => (\n  <Route\n    path={to}\n    exact={exact}\n    children={({ match }) => (\n      <Link to={to}>\n        <li className={match ? \"active\" : \"\"}>\n          {text}\n        </li>\n      </Link>\n    )}\n  />\n);\n\nconst Nav = ({ page, onClick }) => (\n  <nav className=\"nav\">\n    <header><h1>BlOG</h1></header>\n    <Item to='/' exact={true} text='首頁' />\n    <Item to='/posts' text='文章列表' />\n    <Item to='/about' text='關於我' />\n  </nav>\n);\n\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport './home.css';\n\nconst style = {\n  homepage: {\n    fontSize: '40px',\n    paddingTop: '10px',\n  }\n}\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <div style={style.homppage}>I am homepage</div>\n      </div>\n    );\n\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    }\n  }\n\n  componentDidMount() {\n    axios.get('https://qootest.com/posts')\n      .then(res => {\n        this.setState({\n          data: res.data.filter(({ title, author }) => title && author),\n        }); // 太多無用資料，決定先篩選，才使用。\n      });\n  }\n\n  // 待刪除\n  post = (data, page) => (\n    <div className=\"blog__post\">\n      <ul className=\"blog__title\">{data[page]['title']}</ul>\n      <hr />\n      <div className=\"blog__article\">{data[page]['body']}</div>\n    </div>\n  )\n\n  render() {\n    const { data } = this.state;\n    const { history } = this.props;\n    return (\n      <div className=\"blog\">部落格文章\n          <div className=\"blog__posts\">\n          {\n            data.map(post => (\n              <ul\n                className=\"blog__title\"\n                key={post.id}\n                onClick={() => history.push(\"/posts/\" + post.id)}\n              >\n                {post.title}\n              </ul>\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Posts);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: {},\n    }\n  }\n\n  componentDidMount() {\n    const { postId } = this.props.match.params;\n    axios.get('https://qootest.com/posts/' + postId)\n      .then(res => {\n        this.setState({\n          post: res.data,\n        })\n      })\n  }\n\n  render() {\n    const { post } = this.state;\n    return (\n      <div>\n        <h1>POST</h1>\n        <Link to=\"/posts\"><button> back</button> </Link>\n        <div>\n          <h1>{post.title ? post.title : 'Loading'}</h1>\n          <hr />\n          <p className=\"blog__article\">{post.body}</p>\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default Post;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Nav from './nav/';\nimport Home from './home/';\nimport PostList from './post_list/';\nimport Posts from './posts/';\n\nfunction About() {\n  return (\n    <div className=\"about\">\n      <h1 className=\"about__title\">maxime quas veniam</h1>\n      <div className=\"about__content\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Omnis alias harum voluptatem nostrum vero mollitia cum,\n        voluptas neque praesentium provident quasi, obcaecati enim consequatur illo.\n        Hic autem minus aperiam velit.\n        Ducimus corrupti iusto officia aperiam eius ad neque sit minima ut\n        nostrum aliquideaque qui maxime quas veniam doloremque quaerat repellendus esse,\n        rem dolorum tempora perspiciatis impedit?\n        Possimus omnis pariatur et quia eum molestiae, sint unde,\n        reprehenderit recusandae consequuntur iusto eos quis ipsum veritatis,\n        tempore deleniti totam sunt nisi a!\n        </div>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/posts\" component={PostList} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/posts/:postId\" component={Posts} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}